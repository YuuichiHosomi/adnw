/*
    This file is part of the AdNW keyboard firmware.

    Copyright 2010-2018 Stefan Fr√∂be, <frobiac /at/ gmail [d0t] com>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


/** Implement the passhash algorithm as found in Twik app and several passhash browser extensions.
 *
 *  Naming conventions from Twik app:
 *
 *    Private Key     : stored in profile 36 characters if autogenerated uuid
 *    Website URL/Tag : arbitrary string for individual sites/logins
 *    Master Password : must be entered to unlock passhash, may be temporarily stored.
 *
 *  In this code, PRIVATE_KEY is currently hardcoded as a #define in _private_data.h
 *  Master Password and Tag as well as optionally length and type are read in command mode.
 *  Password is kept in RAM until cleared.
 *
 *  @TODO
 *      Password is currently limited in length
 *      Private key define may leak into build environment (logs, process list, ...)
 */

#pragma once

#ifndef uint8_t
    #include <stdint.h>
#endif
#include <stdbool.h>

#define PH_INPUT_LEN PH_MAX_LEN + 1 // 27

#define PH_MIN_LEN       4
#define PH_MAX_LEN      26

#define PH_TYPE_NUM      3
#define PH_TYPE_ALNUM    2
#define PH_TYPE_ALNUMSYM 1

enum PH_STATES { PH_DONE, PH_READING, PH_PW_ENTERED, PH_PW_CLEARED, PH_PW_ERROR, PH_FAIL, PH_UNUSED_LAST };

/**
 *  Calculate passhash from given values.
 *
 *  Global ph_input contain tag at this point.
 *
 *  @ret 0
 */
uint8_t passHash( uint8_t len, uint8_t type);


/**
 * Parser additions
 */
/** Upon very first run, everything up to return is read as master password
 *  Subsequent runs are interpreted as tag len type
 *  Immediate entry of return clears master password
 */
uint8_t ph_parse(char c);
void    ph_reset(void);

#ifndef __AVR__
    // allows to set otherwise hardcoded private key for tests
    void ph_setPrivateKey(char * privateKey);
    void ph_setMasterPW(char * mp);
    #define PWLEN 16
#endif
